import java.util.*;
 
abstract class Node implements Comparable<Node> {
    
  	public  int frequency; // the frequency of this tree
    public  char data;
    public  Node left, right; 
    public Node(int freq) { 
    	frequency = freq;
   	}
 
    // compares on the frequency
    public int compareTo(Node tree) {
        return frequency - tree.frequency;
    }
  
}
 
class HuffmanLeaf extends Node {
    
    public HuffmanLeaf(int freq, char val) {
        super(freq);
        data = val;
    }
  
}
 
class HuffmanNode extends Node {
    
    public HuffmanNode(Node l, Node r) {
        super(l.frequency + r.frequency);
        left = l;
        right = r;
    }

}


class Decoding {

/*  
	class Node
		public  int frequency; // the frequency of this tree
    	public  char data;
    	public  Node left, right;
    
*/ 

    void decode(String s, Node root) {
        if(s.length()==0){
            return;            
        }

        int i=0;
      
        Node temp =root;
        while(i<s.length()){
            if(s.charAt(i)=='0'){
                temp = temp.left;
            }
            else if(s.charAt(i)=='1'){
                //System.out.print(temp.right.data);
                temp  = temp.right;
                //temp=root;
            }
            else if(temp == null){
                System.out.print(temp.data);
                temp=root;
                }
            i++;
        }



        //

    }
    }

